key,docs,classification,library
BeginSignInRequest_isAutoSelectEnabled,"is auto select enabled from begin sign in request returns true if auto-select is requested, false otherwis. Return type is boolean and no argument. configurations that can be used to filter acceptable types of credentials returned from a sign in attempt",neither,identity
BeginSignInRequest.Builder_build,build from begin sign in request builder returns the built begin sign in reques. Return type is Begin Sign In Request and no argument. builder for begin sign in request,neither,identity
BeginSignInRequest.Builder_setAutoSelectEnabled,set auto select enabled from begin sign in request builder sets the auto-select behavior in the reques. Return type is Begin Sign In Request. Builder and parameters are boolean. builder for begin sign in request,neither,identity
BeginSignInRequest.Builder_setGoogleIdTokenRequestOptions,set google id token request options from begin sign in request builder sets the begin sign in request google id token request options for the reques. Return type is Begin Sign In Request. Builder and parameters are begin sign in request google id token request options. builder for begin sign in request,neither,identity
BeginSignInRequest.Builder_setPasswordRequestOptions,set password request options from begin sign in request builder sets the begin sign in request password request options for the reques. Return type is Begin Sign In Request. Builder and parameters are begin sign in request password request options. builder for begin sign in request,neither,identity
BeginSignInRequest.GoogleIdTokenRequestOptions.Builder_associateLinkedAccounts,associate linked accounts from begin sign in request google id token request options builder sets whether to support sign-in using google accounts that are linked to your users' account. Return type is Begin Sign In Request. Google Id Token Request Options. Builder and parameters are string list. builder for begin sign in request google id token request options,neither,identity
BeginSignInRequest.GoogleIdTokenRequestOptions.Builder_build,build from begin sign in request google id token request options builder returns the built begin sign in request google id token request option. Return type is Begin Sign In Request. Google Id Token Request Options and no argument. builder for begin sign in request google id token request options,source,identity
BeginSignInRequest.GoogleIdTokenRequestOptions.Builder_setFilterByAuthorizedAccounts,set filter by authorized accounts from begin sign in request google id token request options builder sets whether to only allow the user to select from google accounts that are already authorized to sign in to your applicatio. Return type is Begin Sign In Request. Google Id Token Request Options. Builder and parameters are boolean. builder for begin sign in request google id token request options,neither,identity
BeginSignInRequest.GoogleIdTokenRequestOptions.Builder_setNonce,set nonce from begin sign in request google id token request options builder sets the nonce to use when generating a google id toke. Return type is Begin Sign In Request. Google Id Token Request Options. Builder and parameters are string. builder for begin sign in request google id token request options,neither,identity
BeginSignInRequest.GoogleIdTokenRequestOptions.Builder_setServerClientId,set server client id from begin sign in request google id token request options builder sets the server's client id to use as the audience for google id tokens generated during the sign-i. Return type is Begin Sign In Request. Google Id Token Request Options. Builder and parameters are string. builder for begin sign in request google id token request options,neither,identity
BeginSignInRequest.GoogleIdTokenRequestOptions.Builder_setSupported,set supported from begin sign in request google id token request options builder sets whether google id token-backed credentials should be returned by the ap. Return type is Begin Sign In Request. Google Id Token Request Options. Builder and parameters are boolean. builder for begin sign in request google id token request options,neither,identity
BeginSignInRequest.PasswordRequestOptions.Builder_build,build from begin sign in request password request options builder returns the built begin sign in request password request option. Return type is Begin Sign In Request. Password Request Options and no argument. builder for begin sign in request password request options,source,identity
BeginSignInRequest.PasswordRequestOptions.Builder_setSupported,set supported from begin sign in request password request options builder sets whether password-backed credentials should be returned by the ap. Return type is Begin Sign In Request. Password Request Options. Builder and parameters are boolean. builder for begin sign in request password request options,neither,identity
GetSignInIntentRequest_getHostedDomainFilter,"get hosted domain filter from get sign in intent request returns the hosted domain filter if it was set in the request, or null otherwis. Return type is String and no argument. request to get a google sign in intent",source,identity
GetSignInIntentRequest_getNonce,get nonce from get sign in intent request returns the nonce that was set in the reques. Return type is String and no argument. request to get a google sign in intent,source,identity
GetSignInIntentRequest_getServerClientId,get server client id from get sign in intent request returns the server client id that was set in the reques. Return type is String and no argument. request to get a google sign in intent,source,identity
GetSignInIntentRequest.Builder_filterByHostedDomain,filter by hosted domain from get sign in intent request builder sets the hosted domain filte. Return type is Get Sign In Intent Request. Builder and parameters are string. builder class for get sign in intent request,source,identity
GetSignInIntentRequest.Builder_setNonce,set nonce from get sign in intent request builder sets the nonce to use when generating a google id toke. Return type is Get Sign In Intent Request. Builder and parameters are string. builder class for get sign in intent request,source,identity
GetSignInIntentRequest.Builder_setServerClientId,set server client id from get sign in intent request builder sets the client id of the server that will verify the integrity of the toke. Return type is Get Sign In Intent Request. Builder and parameters are string. builder class for get sign in intent request,neither,identity
Identity_getCredentialSavingClient,get credential saving client from identity returns a new instance of credential saving clien. Return type is Credential Saving Client and parameters are activity. the entry point to the sign in a p is,source,identity
Identity_getSignInClient,get sign in client from identity returns a new instance of sign in clien. Return type is Sign In Client and parameters are activity. the entry point to the sign in a p is,source,identity
SaveAccountLinkingTokenRequest_builder,builder from save account linking token request returns an instance of the save account linking token request builder that can be used to build an instance of save account linking token reques. Return type is Save Account Linking Token Request. Builder and no argument. configurations that allow saving a token to google for the purpose of account linking,source,identity
SaveAccountLinkingTokenRequest_getConsentPendingIntent,get consent pending intent from save account linking token request returns the pending intent that is set in the request and will be used to launch the consent page by google play services during the flo. Return type is Pending Intent and no argument. configurations that allow saving a token to google for the purpose of account linking,source,identity
SaveAccountLinkingTokenRequest_getScopes,get scopes from save account linking token request returns the scopes that were set in the reques. Return type is List and no argument. configurations that allow saving a token to google for the purpose of account linking,source,identity
SaveAccountLinkingTokenRequest_getServiceId,get service id from save account linking token request returns the service-id that was set in the reques. Return type is String and no argument. configurations that allow saving a token to google for the purpose of account linking,source,identity
SaveAccountLinkingTokenRequest_getTokenType,get token type from save account linking token request returns the type of token that is requeste. Return type is String and no argument. configurations that allow saving a token to google for the purpose of account linking,source,identity
SaveAccountLinkingTokenRequest.Builder_build,build from save account linking token request builder builds an immutable instance of the save account linking token reques. Return type is Save Account Linking Token Request and no argument. builder for save account linking token request,neither,identity
SaveAccountLinkingTokenRequest.Builder_setConsentPendingIntent,set consent pending intent from save account linking token request builder sets th. Return type is Save Account Linking Token Request. Builder and parameters are pending intent. builder for save account linking token request,neither,identity
SaveAccountLinkingTokenRequest.Builder_setScopes,set scopes from save account linking token request builder sets the list of scopes that are associated with the token that will be saved to googl. Return type is Save Account Linking Token Request. Builder and parameters are list. builder for save account linking token request,neither,identity
SaveAccountLinkingTokenRequest.Builder_setServiceId,set service id from save account linking token request builder sets the service-id that can be obtained from your google cloud projec. Return type is Save Account Linking Token Request. Builder and parameters are string. builder for save account linking token request,sink,identity
SaveAccountLinkingTokenRequest.Builder_setTokenType,set token type from save account linking token request builder sets the type of token that will be saved to googl. Return type is Save Account Linking Token Request. Builder and parameters are string. builder for save account linking token request,sink,identity
SaveAccountLinkingTokenResult_getPendingIntent,get pending intent from save account linking token result returns the pending intent that can be used to launch the flo. Return type is Pending Intent and no argument. result returned from the initial call to save an account linking token that includes a pending intent that can be used to continue the flow,neither,identity
SaveAccountLinkingTokenResult_hasResolution,has resolution from save account linking token result returns true if and only if this result contains a resolution that needs to be launche. Return type is boolean and no argument. result returned from the initial call to save an account linking token that includes a pending intent that can be used to continue the flow,neither,identity
SavePasswordRequest_builder,builder from save password request returns a new instance of the save password request builde. Return type is Save Password Request. Builder and no argument. configurations that allow saving a sign in passwordto google,neither,identity
SavePasswordRequest.Builder_build,build from save password request builder builds and returns a new instance of save password reques. Return type is Save Password Request and no argument. builder for save password request,neither,identity
SavePasswordRequest.Builder_setSignInPassword,set sign in password from save password request builder sets the sign in passwor. Return type is Save Password Request. Builder and parameters are sign in password. builder for save password request,sink,identity
SavePasswordResult_getPendingIntent,get pending intent from save password result returns the pending intent that should be launched to start the ui flow for saving the passwor. Return type is Pending Intent and no argument. the result returned from calling credential saving client save password that includes a pending intent that can be used to launch the password saving flow,neither,identity
SignInCredential_getId,get id from sign in credential returns the identifier of the credentia. Return type is String and no argument. the credential returned as a result of a successful sign in,source,identity
CredentialSavingClient_saveAccountLinkingToken,save account linking token from credential saving client attempts to save a token for account linkin. Return type is Task and parameters are save account linking token request. a client for the credential saving api,sink,identity
CredentialSavingClient_savePassword,save password from credential saving client initiates the storage of a password-backed credential that can later be used to sign a user i. Return type is Task and parameters are save password request. a client for the credential saving api,sink,identity
SignInClient_beginSignIn,begin sign in from sign in client initiates the retrieval of a credential that can assist the caller in signing a user in to their applicatio. Return type is Task and parameters are begin sign in request. a client for the sign in api,source,identity
SignInClient_getPhoneNumberFromIntent,"get phone number from intent from sign in client retrieves the phone number from the intent returned upon a successful phone number hint request, throwing an api exception if no phone number is available or the input intent is nul. Return type is String and parameters are intent. a client for the sign in api",source,identity
SignInClient_getPhoneNumberHintIntent,get phone number hint intent from sign in client gets the pending intent that initiates the phone number hint flo. Return type is Task and parameters are get phone number hint intent request. a client for the sign in api,neither,identity
SignInClient_getSignInCredentialFromIntent,"get sign in credential from intent from sign in client retrieves the sign in credential from the intent returned upon successful sign-in, throwing an api exception if no credential is presen. Return type is Sign In Credential and parameters are intent. a client for the sign in api",source,identity
SignInClient_getSignInIntent,get sign in intent from sign in client gets the pending intent that initiates the google sign-in flo. Return type is Task and parameters are get sign in intent request. a client for the sign in api,neither,identity
SignInClient_signOut,sign out from sign in client resets internal state related to sign-i. Return type is Task and no argument. a client for the sign in api,neither,identity
GoogleAnalytics_dispatchLocalHits,dispatch local hits from google analytics dispatches hits queued in the application stor. Return type is void and no argument. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,neither,analytics
GoogleAnalytics_enableAutoActivityReports,enable auto activity reports from google analytics on devices running api level 1. Return type is void and parameters are application. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,neither,analytics
GoogleAnalytics_getAppOptOut,get app opt out from google analytics returns whether the state of the application-level opt is o. Return type is boolean and no argument. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,source,analytics
GoogleAnalytics_getInstance,"get instance from google analytics gets the google analytics instance, creating it when necessar. Return type is Google Analytics and parameters are context. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects",source,analytics
GoogleAnalytics_getLogger,get logger from google analytics this method was deprecated logger interface is deprecated see logger interface for detail. Return type is Logger and no argument. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,neither,analytics
GoogleAnalytics_isDryRunEnabled,is dry run enabled from google analytics returns whether dry run mode is o. Return type is boolean and no argument. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,source,analytics
GoogleAnalytics_newTracker,new tracker from google analytics returns a tracker instance with the given tracking i. Return type is Tracker and parameters are string. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,source,analytics
GoogleAnalytics_newTracker,new tracker from google analytics returns a tracker instance preconfigured with the values specified in config res i. Return type is Tracker and parameters are int. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,source,analytics
GoogleAnalytics_reportActivityStart,"report activity start from google analytics report the start of an activity, so that it can be tracked by any trackers that have enabled auto activity trackin. Return type is void and parameters are activity. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects",sink,analytics
GoogleAnalytics_reportActivityStop,report activity stop from google analytics report the end of an activit. Return type is void and parameters are activity. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,sink,analytics
GoogleAnalytics_setAppOptOut,set app opt out from google analytics sets or resets the application-level opt out fla. Return type is void and parameters are boolean. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,sink,analytics
GoogleAnalytics_setDryRun,set dry run from google analytics toggles dry run mod. Return type is void and parameters are boolean. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,neither,analytics
GoogleAnalytics_setLocalDispatchPeriod,set local dispatch period from google analytics sets dispatch period for the local dispatche. Return type is void and parameters are int. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,neither,analytics
GoogleAnalytics_setLogger,set logger from google analytics this method was deprecated logger interface is deprecated see logger interface for detail. Return type is void and parameters are logger. the top level google analytics singleton that provides methods for configuring google analytics and creating tracker objects,neither,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_addImpression,add impression from hit builders hit builder< t extends hit builder> adds a product impression to the hi. Return type is T and parameters are product string. internal class to provide common builder class methods,neither,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_addProduct,add product from hit builders hit builder< t extends hit builder> adds product information to be sent with a given hi. Return type is T and parameters are product. internal class to provide common builder class methods,sink,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_addPromotion,add promotion from hit builders hit builder< t extends hit builder> adds promotion related information to the hi. Return type is T and parameters are promotion. internal class to provide common builder class methods,sink,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_build,build from hit builders hit builder< t extends hit builder> builds a map of parameters and values that can be set on the tracker objec. Return type is Map and no argument. internal class to provide common builder class methods,neither,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_set,set from hit builders hit builder< t extends hit builder> sets the value for the given parameter nam. Return type is T and parameters are string string. internal class to provide common builder class methods,neither,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_setAll,"set all from hit builders hit builder< t extends hit builder> adds a set of key, value pairs to the hit builde. Return type is T and parameters are map< string string>. internal class to provide common builder class methods",sink,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_setCampaignParamsFromUrl,set campaign params from url from hit builders hit builder< t extends hit builder> parses and translates utm campaign parameters to analytics campaign parameters and returns them as a ma. Return type is T and parameters are string. internal class to provide common builder class methods,sink,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_setCustomDimension,set custom dimension from hit builders hit builder< t extends hit builder> adds a custom dimension to the current hit builde. Return type is T and parameters are int string. internal class to provide common builder class methods,sink,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_setCustomMetric,set custom metric from hit builders hit builder< t extends hit builder> adds a custom metric to the current hit builde. Return type is T and parameters are int float. internal class to provide common builder class methods,sink,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_setProductAction,set product action from hit builders hit builder< t extends hit builder> sets a product action for all the products included in this hi. Return type is T and parameters are product action. internal class to provide common builder class methods,sink,analytics
HitBuilders.HitBuilder<T extendsHitBuilder>_setPromotionAction,set promotion action from hit builders hit builder< t extends hit builder> adds an action associated with the promotions in a given hi. Return type is T and parameters are string. internal class to provide common builder class methods,sink,analytics
StandardExceptionParser_getDescription,"get description from standard exception parser return a short description of a throwable suitable for reporting to google analytic. Return type is String and parameters are string throwable. this class will capture the root cause  throwable and report the exception type, class name, method name and thread name",source,analytics
StandardExceptionParser_setIncludedPackages,"set included packages from standard exception parser sets the list of packages considered relevant to the list of packages in the context and the list of packages provided in the input parameter additional package. Return type is void and parameters are context collection. this class will capture the root cause  throwable and report the exception type, class name, method name and thread name",neither,analytics
Tracker_enableAdvertisingIdCollection,enable advertising id collection from tracker sets whether the advertising id and ad targeting preference should be collected while sending hits to ga server. Return type is void and parameters are boolean. composes and sends hits to google analytics,neither,analytics
Tracker_enableAutoActivityTracking,enable auto activity tracking from tracker specify whether activity starts should automatically generate screen views from this tracke. Return type is void and parameters are boolean. composes and sends hits to google analytics,neither,analytics
Tracker_enableExceptionReporting,enable exception reporting from tracker enables or disables uncaught exception reporting for a given tracke. Return type is void and parameters are boolean. composes and sends hits to google analytics,neither,analytics
Tracker_get,get from tracker gets the model value for the given ke. Return type is String and parameters are string. composes and sends hits to google analytics,source,analytics
Tracker_send,send from tracker merges the model values set on this tracker via se. Return type is void and parameters are map< string string>. composes and sends hits to google analytics,sink,analytics
Tracker_set,set from tracker sets the model value for the given ke. Return type is void and parameters are string string. composes and sends hits to google analytics,sink,analytics
Tracker_setAppId,set app id from tracker sets the id of the app for analytics report. Return type is void and parameters are string. composes and sends hits to google analytics,sink,analytics
Tracker_setAppInstallerId,set app installer id from tracker sets the installer id of the app for analytics report. Return type is void and parameters are string. composes and sends hits to google analytics,sink,analytics
Tracker_setAppName,set app name from tracker sets the name of the app for analytics report. Return type is void and parameters are string. composes and sends hits to google analytics,sink,analytics
Tracker_setAppVersion,set app version from tracker sets the version identifier of the app for analytics report. Return type is void and parameters are string. composes and sends hits to google analytics,sink,analytics
Tracker_setCampaignParamsOnNextHit,set campaign params on next hit from tracker includes the campaign parameters contained in the uri referrer in the next hi. Return type is void and parameters are uri. composes and sends hits to google analytics,sink,analytics
Tracker_setClientId,set client id from tracker sets a particular client id for the devic. Return type is void and parameters are string. composes and sends hits to google analytics,sink,analytics
Tracker_setLanguage,set language from tracker sets the language based on user's preferred local. Return type is void and parameters are string. composes and sends hits to google analytics,sink,analytics
Tracker_setSampleRate,set sample rate from tracker set the sample rate for all hits generated by the ap. Return type is void and parameters are double. composes and sends hits to google analytics,sink,analytics
Tracker_setScreenName,set screen name from tracker set the screen name to be associated with all subsequent hit. Return type is void and parameters are string. composes and sends hits to google analytics,sink,analytics
Tracker_setScreenResolution,set screen resolution from tracker sets the screen resolution of the devic. Return type is void and parameters are int int. composes and sends hits to google analytics,sink,analytics
Tracker_setSessionTimeout,set session timeout from tracker specify the tim. Return type is void and parameters are long. composes and sends hits to google analytics,sink,analytics
Tracker_setUseSecure,set use secure from tracker sets whether hits should be sent securely over http. Return type is void and parameters are boolean. composes and sends hits to google analytics,sink,analytics
ExceptionParser_getDescription,"get description from exception parser return a short description of a throwable suitable for reporting to google analytic. Return type is String and parameters are string throwable. this interface is responsible for parsing a throwable and providing a short, meaningful description to report to google analytics",source,analytics
Logger_error,error from logger this method was deprecated see logger interface for detail. Return type is  void and parameters are exception. this interface was deprecated  logger interface is deprecated  use adb shell setprop log tag g av4 debug to enable debug logging for google analytics,neither,analytics
Logger_getLogLevel,get log level from logger this method was deprecated see logger interface for detail. Return type is  int and no argument. this interface was deprecated  logger interface is deprecated  use adb shell setprop log tag g av4 debug to enable debug logging for google analytics,neither,analytics
Logger_info,info from logger this method was deprecated see logger interface for detail. Return type is  void and parameters are string. this interface was deprecated  logger interface is deprecated  use adb shell setprop log tag g av4 debug to enable debug logging for google analytics,neither,analytics
Logger_setLogLevel,set log level from logger this method was deprecated see logger interface for detail. Return type is  void and parameters are int. this interface was deprecated  logger interface is deprecated  use adb shell setprop log tag g av4 debug to enable debug logging for google analytics,neither,analytics
Logger_verbose,verbose from logger this method was deprecated see logger interface for detail. Return type is  void and parameters are string. this interface was deprecated  logger interface is deprecated  use adb shell setprop log tag g av4 debug to enable debug logging for google analytics,neither,analytics
Logger_warn,warn from logger this method was deprecated see logger interface for detail. Return type is  void and parameters are string. this interface was deprecated  logger interface is deprecated  use adb shell setprop log tag g av4 debug to enable debug logging for google analytics,neither,analytics
InstanceID_deleteInstanceID,delete instance i d from instance i d this method was deprecated instance id is deprecated and replaced by firebase instance id see the fcm migration guide for details on how to migrate to firebase instance i. Return type is void and no argument. this class was deprecated  instance id is deprecated and replaced by firebase instance id  see the fcm migration guide for details on how to migrate to firebase instance id,neither,iid
InstanceID_deleteToken,delete token from instance i d this method was deprecated instance id is deprecated and replaced by firebase instance id see the fcm migration guide for details on how to migrate to firebase instance i. Return type is void and parameters are string string. this class was deprecated  instance id is deprecated and replaced by firebase instance id  see the fcm migration guide for details on how to migrate to firebase instance id,neither,iid
InstanceID_getCreationTime,get creation time from instance i d this method was deprecated instance id is deprecated and replaced by firebase instance id see the fcm migration guide for details on how to migrate to firebase instance i. Return type is long and no argument. this class was deprecated  instance id is deprecated and replaced by firebase instance id  see the fcm migration guide for details on how to migrate to firebase instance id,neither,iid
InstanceID_getId,get id from instance i d this method was deprecated instance id is deprecated and replaced by firebase instance id see the fcm migration guide for details on how to migrate to firebase instance i. Return type is String and no argument. this class was deprecated  instance id is deprecated and replaced by firebase instance id  see the fcm migration guide for details on how to migrate to firebase instance id,neither,iid
InstanceID_getInstance,get instance from instance i d this method was deprecated instance id is deprecated and replaced by firebase instance id see the fcm migration guide for details on how to migrate to firebase instance i. Return type is Instance I D and parameters are context. this class was deprecated  instance id is deprecated and replaced by firebase instance id  see the fcm migration guide for details on how to migrate to firebase instance id,neither,iid
InstanceID_getToken,get token from instance i d this method was deprecated instance id is deprecated and replaced by firebase instance id see the fcm migration guide for details on how to migrate to firebase instance i. Return type is String and parameters are string string. this class was deprecated  instance id is deprecated and replaced by firebase instance id  see the fcm migration guide for details on how to migrate to firebase instance id,neither,iid
InstanceIDListenerService_onTokenRefresh,on token refresh from instance i d listener service called when the system determines that the tokens need to be refreshe. Return type is void and no argument. this class was deprecated  instance id is deprecated and replaced by firebase instance id  see the fcm migration guide for details on how to migrate to firebase instance id,neither,iid
FirebaseAnalytics_getAppInstanceId,"get app instance id from firebase analytics retrieves the app instance id from the service, or null if firebase analytics consent type a n a l y t i c s_ s t o r a g e has been set to firebase analytics consent status d e n i e. Return type is Task and no argument. the top level firebase analytics singleton that provides methods for logging events and setting user properties",source,analytics
FirebaseAnalytics_getInstance,get instance from firebase analytics returns the singleton firebase analytics interfac. Return type is Firebase Analytics and parameters are context. the top level firebase analytics singleton that provides methods for logging events and setting user properties,neither,analytics
FirebaseAnalytics_logEvent,log event from firebase analytics logs an app even. Return type is void and parameters are string bundle. the top level firebase analytics singleton that provides methods for logging events and setting user properties,sink,analytics
FirebaseAnalytics_resetAnalyticsData,reset analytics data from firebase analytics clears all analytics data for this app from the device and resets the app instance i. Return type is void and no argument. the top level firebase analytics singleton that provides methods for logging events and setting user properties,neither,analytics
FirebaseAnalytics_setAnalyticsCollectionEnabled,set analytics collection enabled from firebase analytics sets whether analytics collection is enabled for this app on this devic. Return type is void and parameters are boolean. the top level firebase analytics singleton that provides methods for logging events and setting user properties,neither,analytics
FirebaseAnalytics_setConsent,set consent from firebase analytics sets the applicable end user consent stat. Return type is void and parameters are map< firebase analytics consent type firebase analytics consent status>. the top level firebase analytics singleton that provides methods for logging events and setting user properties,neither,analytics
FirebaseAnalytics_setCurrentScreen,set current screen from firebase analytics deprecate. Return type is void and parameters are activity string string. the top level firebase analytics singleton that provides methods for logging events and setting user properties,neither,analytics
FirebaseAnalytics_setDefaultEventParameters,"set default event parameters from firebase analytics adds parameters that will be set on every event logged from the s d k, including automatic one. Return type is void and parameters are bundle. the top level firebase analytics singleton that provides methods for logging events and setting user properties",sink,analytics
FirebaseAnalytics_setSessionTimeoutDuration,set session timeout duration from firebase analytics sets the duration of inactivity that terminates the current session the default value is 180000. Return type is void and parameters are long. the top level firebase analytics singleton that provides methods for logging events and setting user properties,neither,analytics
FirebaseAnalytics_setUserId,set user id from firebase analytics sets the user id propert. Return type is void and parameters are string. the top level firebase analytics singleton that provides methods for logging events and setting user properties,sink,analytics
FirebaseAnalytics_setUserProperty,set user property from firebase analytics sets a user property to a given valu. Return type is void and parameters are string string. the top level firebase analytics singleton that provides methods for logging events and setting user properties,sink,analytics
AdvertisingIdClient_getAdvertisingIdInfo,get advertising id info from advertising id client retrieves the user's advertising id and limit ad tracking preferenc. Return type is Advertising Id Client. Info and parameters are context. helper library for retrieval of advertising id and related information such as the limit ad tracking setting,source,identifier
AdvertisingIdClient.Info_getId,get id from advertising id client info retrieves the advertising i. Return type is String and no argument. includes both the advertising id as well as the limit ad tracking setting,source,identifier
AdvertisingIdClient.Info_isLimitAdTrackingEnabled,is limit ad tracking enabled from advertising id client info retrieves whether the user has limit ad tracking enabled or no. Return type is boolean and no argument. includes both the advertising id as well as the limit ad tracking setting,source,identifier
AdapterResponseInfo_getAdError,get ad error from adapter response info gets the error that occurred while rendering the a. Return type is Ad Error and no argument. response information for an individual ad network in an ad response,neither,ads
AdapterResponseInfo_getAdapterClassName,get adapter class name from adapter response info gets a class name that identifies the ad network adapte. Return type is String and no argument. response information for an individual ad network in an ad response,source,ads
AdapterResponseInfo_getCredentials,get credentials from adapter response info gets a bundle containing adapter credentials specified in the ad mob or ad manager u. Return type is Bundle and no argument. response information for an individual ad network in an ad response,source,ads
AdapterResponseInfo_getLatencyMillis,get latency millis from adapter response info gets the amount of time the ad network adapter spent loading an a. Return type is long and no argument. response information for an individual ad network in an ad response,source,ads
AdapterResponseInfo_toString,to string from adapter response info returns a log friendly string version of this objec. Return type is String and no argument. response information for an individual ad network in an ad response,source,ads
AdError_getCause,get cause from ad error gets the cause of this error or null if the cause is nonexistent or unknow. Return type is Ad Error and no argument. error information about why an ad operation failed,neither,ads
AdError_getCode,get code from ad error gets the error's cod. Return type is int and no argument. error information about why an ad operation failed,neither,ads
AdError_getDomain,get domain from ad error gets the domain of the erro. Return type is String and no argument. error information about why an ad operation failed,source,ads
AdError_getMessage,get message from ad error gets the message describing the erro. Return type is String and no argument. error information about why an ad operation failed,source,ads
AdError_toString,to string from ad error returns a log friendly string version of this objec. Return type is String and no argument. error information about why an ad operation failed,source,ads
AdInspectorError_getCode,get code from ad inspector error gets the error's cod. Return type is int and no argument. error information about why the ad inspector failed,source,ads
AdListener_onAdClicked,on ad clicked from ad listener called when a click is recorded for an a. Return type is void and no argument. a listener for receiving notifications during the lifecycle of an ad,neither,ads
AdListener_onAdClosed,on ad closed from ad listener called when the user is about to return to the application after clicking on an a. Return type is void and no argument. a listener for receiving notifications during the lifecycle of an ad,neither,ads
AdListener_onAdFailedToLoad,on ad failed to load from ad listener called when an ad request faile. Return type is void and parameters are load ad error. a listener for receiving notifications during the lifecycle of an ad,neither,ads
AdListener_onAdImpression,on ad impression from ad listener called when an impression is recorded for an a. Return type is void and no argument. a listener for receiving notifications during the lifecycle of an ad,neither,ads
AdListener_onAdLoaded,on ad loaded from ad listener called when an ad is receive. Return type is void and no argument. a listener for receiving notifications during the lifecycle of an ad,neither,ads
AdListener_onAdOpened,on ad opened from ad listener called when an ad opens an overlay that covers the scree. Return type is void and no argument. a listener for receiving notifications during the lifecycle of an ad,neither,ads
AdLoadCallback<AdT>_onAdFailedToLoad,on ad failed to load from ad load callback< ad t> called when an ad fails to loa. Return type is void and parameters are load ad error. callback to be invoked when an ad finishes loading,neither,ads
AdLoadCallback<AdT>_onAdLoaded,on ad loaded from ad load callback< ad t> called when an ad successfully load. Return type is void and parameters are ad t. callback to be invoked when an ad finishes loading,neither,ads
AdLoader_isLoading,is loading from ad loader returns true if the ad is loadin. Return type is boolean and no argument. an object for requesting ads,neither,ads
AdLoader_loadAd,load ad from ad loader loads an a. Return type is void and parameters are ad request. an object for requesting ads,neither,ads
AdLoader_loadAds,load ads from ad loader sends a request for max number of ads ad. Return type is void and parameters are ad request int. an object for requesting ads,neither,ads
AdLoader.Builder_build,build from ad loader builder returns an ad loader or empty if there was an error was encountere. Return type is Ad Loader and no argument. builder for a ad loader,neither,ads
AdLoader.Builder_forAdManagerAdView,for ad manager ad view from ad loader builder registers a listener to handle loading a google ad manager banner a. Return type is Ad Loader. Builder and parameters are on ad manager ad view loaded listener ad size   . builder for a ad loader,neither,ads
AdLoader.Builder_forCustomFormatAd,for custom format ad from ad loader builder enables the ad loader to load custom format ad. Return type is Ad Loader. Builder and parameters are string native custom format ad on custom format ad loaded listener native custom format ad on custom click listener. builder for a ad loader,neither,ads
AdLoader.Builder_forCustomTemplateAd,for custom template ad from ad loader builder deprecate. Return type is Ad Loader. Builder and parameters are string native custom template ad on custom template ad loaded listener native custom template ad on custom click listener. builder for a ad loader,neither,ads
AdLoader.Builder_forNativeAd,for native ad from ad loader builder registers a listener to handle loading a native a. Return type is Ad Loader. Builder and parameters are native ad on native ad loaded listener. builder for a ad loader,neither,ads
AdLoader.Builder_forUnifiedNativeAd,for unified native ad from ad loader builder deprecate. Return type is Ad Loader. Builder and parameters are unified native ad on unified native ad loaded listener. builder for a ad loader,neither,ads
AdLoader.Builder_withAdManagerAdViewOptions,with ad manager ad view options from ad loader builder sets options to use for loading a google ad manager ad vie. Return type is Ad Loader. Builder and parameters are ad manager ad view options. builder for a ad loader,neither,ads
AdLoader.Builder_withNativeAdOptions,with native ad options from ad loader builder sets the native ad options to the ad loader builde. Return type is Ad Loader. Builder and parameters are native ad options. builder for a ad loader,neither,ads
AdLoader.Builder_withNativeAdOptions,with native ad options from ad loader builder deprecate. Return type is Ad Loader. Builder and parameters are native ad options. builder for a ad loader,neither,ads
AdRequest_getContentUrl,get content url from ad request returns the content url targeting informatio. Return type is String and no argument. an ad request contains targeting information used to fetch an ad,source,ads
AdRequest_getCustomEventExtrasBundle,get custom event extras bundle from ad request returns extra parameters to pass to a specific custom event adapte. Return type is Bundle and parameters are class. an ad request contains targeting information used to fetch an ad,source,ads
AdRequest_getKeywords,get keywords from ad request returns targeting information keyword. Return type is Set and no argument. an ad request contains targeting information used to fetch an ad,source,ads
AdRequest_getLocation,get location from ad request returns the user's location targeting informatio. Return type is Location and no argument. an ad request contains targeting information used to fetch an ad,source,ads
AdRequest_getNeighboringContentUrls,get neighboring content urls from ad request returns the list of neighboring content u r ls or an empty list if no u r ls were se. Return type is List and no argument. an ad request contains targeting information used to fetch an ad,source,ads
AdRequest_getNetworkExtrasBundle,get network extras bundle from ad request returns extra parameters to pass to a specific ad network adapte. Return type is Bundle and parameters are class. an ad request contains targeting information used to fetch an ad,source,ads
AdRequest_isTestDevice,is test device from ad request returns true if this device will receive test ad. Return type is boolean and parameters are context. an ad request contains targeting information used to fetch an ad,source,ads
AdRequest.Builder_addCustomEventExtrasBundle,add custom event extras bundle from ad request builder adds extra parameters to pass to a specific custom event adapte. Return type is Ad Request. Builder and parameters are class<? bundle. builds an ad request,sink,ads
AdRequest.Builder_addKeyword,add keyword from ad request builder adds a keyword for targeting purpose. Return type is Ad Request. Builder and parameters are string. builds an ad request,sink,ads
AdRequest.Builder_addNetworkExtras,add network extras from ad request builder deprecate. Return type is Ad Request. Builder and parameters are network extras. builds an ad request,sink,ads
AdRequest.Builder_addNetworkExtrasBundle,add network extras bundle from ad request builder adds extra parameters to pass to a specific ad network adapte. Return type is Ad Request. Builder and parameters are class<? bundle. builds an ad request,sink,ads
AdRequest.Builder_build,build from ad request builder constructs an ad request with the specified attribute. Return type is Ad Request and no argument. builds an ad request,neither,ads
AdRequest.Builder_setContentUrl,set content url from ad request builder sets the content url for a web site whose content matches the app's primary conten. Return type is Ad Request. Builder and parameters are string. builds an ad request,sink,ads
AdRequest.Builder_setHttpTimeoutMillis,set http timeout millis from ad request builder sets a custom timeout for https calls made by the google mobile ads sdk during an ad reques. Return type is Ad Request. Builder and parameters are int. builds an ad request,neither,ads
AdRequest.Builder_setLocation,set location from ad request builder sets the user's location for mediation targeting purpose. Return type is Ad Request. Builder and parameters are location. builds an ad request,sink,ads
AdRequest.Builder_setNeighboringContentUrls,set neighboring content urls from ad request builder sets u r ls representing web content near an a. Return type is Ad Request. Builder and parameters are list. builds an ad request,sink,ads
AdRequest.Builder_setRequestAgent,set request agent from ad request builder sets the request agent string to identify the ad request's origi. Return type is Ad Request. Builder and parameters are string. builds an ad request,sink,ads
AdSize_equals,equals from ad size compares this ad size with the specified object and indicates if they are equa. Return type is boolean and parameters are object. the size of a banner ad,neither,ads
AdSize_getCurrentOrientationAnchoredAdaptiveBannerAdSize,get current orientation anchored adaptive banner ad size from ad size returns an ad size with the given width and a google-optimized height to create a banner a. Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getCurrentOrientationInlineAdaptiveBannerAdSize,get current orientation inline adaptive banner ad size from ad size returns an ad size with the given width and a height that is always . Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getCurrentOrientationInterscrollerAdSize,get current orientation interscroller ad size from ad size returns an interscroller ad size with the given width and a height that is always . Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getHeight,get height from ad size returns the height of this ad size in density-independent pixel. Return type is int and no argument. the size of a banner ad,source,ads
AdSize_getHeightInPixels,get height in pixels from ad size returns the height of this ad size in physical pixel. Return type is int and parameters are context. the size of a banner ad,source,ads
AdSize_getInlineAdaptiveBannerAdSize,get inline adaptive banner ad size from ad size returns an ad size with the given width and a height that is always . Return type is Ad Size and parameters are int int. the size of a banner ad,source,ads
AdSize_getLandscapeAnchoredAdaptiveBannerAdSize,get landscape anchored adaptive banner ad size from ad size returns an ad size with the given width and a google-optimized height to create a banner a. Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getLandscapeInlineAdaptiveBannerAdSize,get landscape inline adaptive banner ad size from ad size returns an ad size with the given width and a height that is always . Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getLandscapeInterscrollerAdSize,get landscape interscroller ad size from ad size returns an interscroller ad size with the given width and a height that is always . Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getPortraitAnchoredAdaptiveBannerAdSize,get portrait anchored adaptive banner ad size from ad size returns an ad size with the given width and a google-optimized height to create a banner a. Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getPortraitInlineAdaptiveBannerAdSize,get portrait inline adaptive banner ad size from ad size returns an ad size with the given width and a height that is always . Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getPortraitInterscrollerAdSize,get portrait interscroller ad size from ad size returns an interscroller ad size with the given width and a height that is always . Return type is Ad Size and parameters are context int. the size of a banner ad,source,ads
AdSize_getWidth,get width from ad size returns the width of this ad size in density-independent pixel. Return type is int and no argument. the size of a banner ad,source,ads
AdSize_getWidthInPixels,get width in pixels from ad size returns the width of this ad size in physical pixel. Return type is int and parameters are context. the size of a banner ad,source,ads
AdSize_isAutoHeight,is auto height from ad size returns whether this ad size is auto-heigh. Return type is boolean and no argument. the size of a banner ad,source,ads
AdSize_isFluid,is fluid from ad size returns whether this ad size is of fluid size or no. Return type is boolean and no argument. the size of a banner ad,source,ads
AdSize_isFullWidth,is full width from ad size returns whether this ad size is full-widt. Return type is boolean and no argument. the size of a banner ad,source,ads
AdValue_getCurrencyCode,get currency code from ad value the value's iso 4217 currency cod. Return type is String and no argument. the monetary value earned from an ad,source,ads
AdValue_getPrecisionType,get precision type from ad value the precision type of the reported ad valu. Return type is int and no argument. the monetary value earned from an ad,source,ads
AdValue_getValueMicros,"get value micros from ad value the ad's value in micro-units, where 1,000,000 micro-units equal one unit of the currenc. Return type is long and no argument. the monetary value earned from an ad",source,ads
BaseAdView_destroy,destroy from base ad view destroys the ad vie. Return type is void and no argument. the base ad view for displaying banner ads,neither,ads
BaseAdView_getAdListener,get ad listener from base ad view returns the ad listener for this ad vie. Return type is Ad Listener and no argument. the base ad view for displaying banner ads,neither,ads
BaseAdView_getAdSize,get ad size from base ad view returns the size of the a. Return type is Ad Size and no argument. the base ad view for displaying banner ads,source,ads
BaseAdView_getAdUnitId,get ad unit id from base ad view returns the ad unit i. Return type is String and no argument. the base ad view for displaying banner ads,source,ads
BaseAdView_getOnPaidEventListener,get on paid event listener from base ad view gets the on paid event listener for this ad vie. Return type is On Paid Event Listener and no argument. the base ad view for displaying banner ads,neither,ads
BaseAdView_getResponseInfo,get response info from base ad view returns the response info object for the loaded a. Return type is Response Info and no argument. the base ad view for displaying banner ads,source,ads
BaseAdView_isLoading,is loading from base ad view returns true if the ad is loadin. Return type is boolean and no argument. the base ad view for displaying banner ads,neither,ads
BaseAdView_loadAd,load ad from base ad view loads an a. Return type is void and parameters are ad request. the base ad view for displaying banner ads,neither,ads
BaseAdView_pause,pause from base ad view pauses any extra processing associated with this ad vie. Return type is void and no argument. the base ad view for displaying banner ads,neither,ads
BaseAdView_resume,resume from base ad view resumes an ad view after a previous call to pau. Return type is void and no argument. the base ad view for displaying banner ads,neither,ads
BaseAdView_setAdListener,set ad listener from base ad view sets an ad listener for this ad vie. Return type is void and parameters are ad listener. the base ad view for displaying banner ads,neither,ads
BaseAdView_setAdSize,set ad size from base ad view sets the size of the a. Return type is void and parameters are ad size. the base ad view for displaying banner ads,neither,ads
BaseAdView_setAdUnitId,set ad unit id from base ad view sets the ad unit i. Return type is void and parameters are string. the base ad view for displaying banner ads,sink,ads
BaseAdView_setOnPaidEventListener,set on paid event listener from base ad view registers a callback to be invoked when this ad is estimated to have earned mone. Return type is void and parameters are on paid event listener. the base ad view for displaying banner ads,neither,ads
FullScreenContentCallback_onAdClicked,"on ad clicked from full screen content callback called when a click is recorded for an a. Return type is void and no argument. callback to be invoked when ads show and dismiss full screen content, such as a fullscreen ad experience or an in app browser",neither,ads
FullScreenContentCallback_onAdDismissedFullScreenContent,"on ad dismissed full screen content from full screen content callback called when the ad dismissed full screen conten. Return type is void and no argument. callback to be invoked when ads show and dismiss full screen content, such as a fullscreen ad experience or an in app browser",neither,ads
FullScreenContentCallback_onAdFailedToShowFullScreenContent,"on ad failed to show full screen content from full screen content callback called when the ad failed to show full screen conten. Return type is void and parameters are ad error. callback to be invoked when ads show and dismiss full screen content, such as a fullscreen ad experience or an in app browser",neither,ads
FullScreenContentCallback_onAdImpression,"on ad impression from full screen content callback called when an impression is recorded for an a. Return type is void and no argument. callback to be invoked when ads show and dismiss full screen content, such as a fullscreen ad experience or an in app browser",neither,ads
FullScreenContentCallback_onAdShowedFullScreenContent,"on ad showed full screen content from full screen content callback called when the ad showed the full screen conten. Return type is void and no argument. callback to be invoked when ads show and dismiss full screen content, such as a fullscreen ad experience or an in app browser",neither,ads
LoadAdError_getResponseInfo,get response info from load ad error gets the response info of the erro. Return type is Response Info and no argument. error information about why an ad load operation failed,source,ads
LoadAdError_toString,to string from load ad error returns a log friendly string version of this objec. Return type is String and no argument. error information about why an ad load operation failed,neither,ads
MediationUtils_findClosestSize,find closest size from mediation utils finds the closest supported ad size from the list of potentials to the provided siz. Return type is Ad Size and parameters are context ad size list. utility methods for mediation adapters,neither,ads
MobileAds_disableMediationAdapterInitialization,disable mediation adapter initialization from mobile ads call before initiali. Return type is  void and parameters are context. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_getInitializationStatus,get initialization status from mobile ads gets the sdk initialization statu. Return type is Initialization Status and no argument. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_getRequestConfiguration,get request configuration from mobile ads gets the global request configuratio. Return type is Request Configuration and no argument. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_getVersionString,get version string from mobile ads gets the version string of google mobile ads sd. Return type is String and no argument. class contains logic that applies to the google mobile ads sdk as a whole,source,ads
MobileAds_initialize,initialize from mobile ads initializes the google mobile ads sd. Return type is  void and parameters are context. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_openAdInspector,open ad inspector from mobile ads opens the ad inspector u. Return type is  void and parameters are context on ad inspector closed listener. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_openDebugMenu,open debug menu from mobile ads opens the debug men. Return type is  void and parameters are context string. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_setAppMuted,set app muted from mobile ads sets the current app mute stat. Return type is  void and parameters are boolean. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_setAppVolume,set app volume from mobile ads sets the current app volum. Return type is  void and parameters are float. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
MobileAds_setRequestConfiguration,set request configuration from mobile ads sets the global request configuration that will be used for every ad request during the app's sessio. Return type is  void and parameters are request configuration. class contains logic that applies to the google mobile ads sdk as a whole,neither,ads
RequestConfiguration_getMaxAdContentRating,get max ad content rating from request configuration returns the value set by the corresponding request configuration builderset max ad content rati. Return type is String and no argument. global configuration that will be used for every ad request,source,ads
RequestConfiguration_getTagForChildDirectedTreatment,get tag for child directed treatment from request configuration returns the value set by the corresponding request configuration builderset tag for child directed treatme. Return type is int and no argument. global configuration that will be used for every ad request,source,ads
RequestConfiguration_getTagForUnderAgeOfConsent,get tag for under age of consent from request configuration returns the value set by the corresponding request configuration builderset tag for under age of conse. Return type is int and no argument. global configuration that will be used for every ad request,source,ads
RequestConfiguration_getTestDeviceIds,get test device ids from request configuration returns the test device i ds corresponding to test device which will always request test ad. Return type is List and no argument. global configuration that will be used for every ad request,source,ads
RequestConfiguration_toBuilder,to builder from request configuration returns a request configuration builder with values from this request configuratio. Return type is Request Configuration. Builder and no argument. global configuration that will be used for every ad request,source,ads
RequestConfiguration.Builder_build,build from request configuration builder builds the request configuratio. Return type is Request Configuration and no argument. builder for request configuration,neither,ads
RequestConfiguration.Builder_setMaxAdContentRating,set max ad content rating from request configuration builder sets a maximum ad content ratin. Return type is Request Configuration. Builder and parameters are string. builder for request configuration,sink,ads
RequestConfiguration.Builder_setTagForChildDirectedTreatment,set tag for child directed treatment from request configuration builder this method allows you to specify whether you would like your app to be treated as child-directed for purposes of the children’s online privacy protection ac. Return type is Request Configuration. Builder and parameters are int. builder for request configuration,sink,ads
RequestConfiguration.Builder_setTagForUnderAgeOfConsent,set tag for under age of consent from request configuration builder this method allows you to mark your app to receive treatment for users in the european economic are. Return type is Request Configuration. Builder and parameters are int. builder for request configuration,sink,ads
RequestConfiguration.Builder_setTestDeviceIds,set test device ids from request configuration builder sets a list of test device i ds corresponding to test devices which will always request test ad. Return type is Request Configuration. Builder and parameters are list. builder for request configuration,sink,ads
ResponseInfo_getAdapterResponses,get adapter responses from response info returns the list of adapter response info containing metadata for each adapter included in the ad respons. Return type is List and no argument. information about an ad response,source,ads
ResponseInfo_getMediationAdapterClassName,get mediation adapter class name from response info returns the mediation adapter class name of the ad network that loaded the a. Return type is String and no argument. information about an ad response,source,ads
ResponseInfo_getResponseId,get response id from response info returns the response id for the loaded a. Return type is String and no argument. information about an ad response,source,ads
ResponseInfo_toString,to string from response info returns a log friendly string version of this objec. Return type is String and no argument. information about an ad response,source,ads
VideoController_getVideoLifecycleCallbacks,get video lifecycle callbacks from video controller returns the previously provided video controller video lifecycle callbacks or null if no instance was provide. Return type is Video Controller. Video Lifecycle Callbacks and no argument. an object that provides playback control for video ads,source,ads
VideoController_hasVideoContent,has video content from video controller returns true if the current ad has video conten. Return type is boolean and no argument. an object that provides playback control for video ads,source,ads
VideoController_isClickToExpandEnabled,is click to expand enabled from video controller returns true if the video ad is using click to expand behavio. Return type is boolean and no argument. an object that provides playback control for video ads,source,ads
VideoController_isCustomControlsEnabled,is custom controls enabled from video controller returns true if the video ad is using custom player control. Return type is boolean and no argument. an object that provides playback control for video ads,source,ads
VideoController_isMuted,"is muted from video controller returns true if the video is currently muted, false otherwis. Return type is boolean and no argument. an object that provides playback control for video ads",source,ads
VideoController_mute,mute from video controller sets the video mute stat. Return type is void and parameters are boolean. an object that provides playback control for video ads,neither,ads
VideoController_pause,pause from video controller pauses the video ad if applicabl. Return type is void and no argument. an object that provides playback control for video ads,neither,ads
VideoController_play,play from video controller play the video ad if applicabl. Return type is void and no argument. an object that provides playback control for video ads,neither,ads
VideoController_setVideoLifecycleCallbacks,set video lifecycle callbacks from video controller sets a listener that will receive callbacks for video event. Return type is void and parameters are video controller video lifecycle callbacks. an object that provides playback control for video ads,neither,ads
VideoController_stop,stop from video controller stops video playbac. Return type is void and no argument. an object that provides playback control for video ads,neither,ads
VideoController.VideoLifecycleCallbacks_onVideoEnd,on video end from video controller video lifecycle callbacks called when video playback finishe. Return type is void and no argument. callback for receiving updates on video ad lifecycle events,neither,ads
VideoController.VideoLifecycleCallbacks_onVideoMute,on video mute from video controller video lifecycle callbacks called when the video changes mute stat. Return type is void and parameters are boolean. callback for receiving updates on video ad lifecycle events,neither,ads
VideoController.VideoLifecycleCallbacks_onVideoPause,on video pause from video controller video lifecycle callbacks called when video playback is pause. Return type is void and no argument. callback for receiving updates on video ad lifecycle events,neither,ads
VideoController.VideoLifecycleCallbacks_onVideoPlay,on video play from video controller video lifecycle callbacks called when video playback is playin. Return type is void and no argument. callback for receiving updates on video ad lifecycle events,neither,ads
VideoController.VideoLifecycleCallbacks_onVideoStart,on video start from video controller video lifecycle callbacks called when video playback first begin. Return type is void and no argument. callback for receiving updates on video ad lifecycle events,neither,ads
VideoOptions_getClickToExpandRequested,get click to expand requested from video options returns true if click to expand behavior is requeste. Return type is boolean and no argument. options for controlling video playback in supported ad format,source,ads
VideoOptions_getCustomControlsRequested,get custom controls requested from video options returns true if custom video controls are requeste. Return type is boolean and no argument. options for controlling video playback in supported ad format,source,ads
VideoOptions_getStartMuted,get start muted from video options returns the initial mute state of the vide. Return type is boolean and no argument. options for controlling video playback in supported ad format,source,ads
VideoOptions.Builder_build,build from video options builder constructs a video options object with the specified attribute. Return type is Video Options and no argument. builder for video options,neither,ads
VideoOptions.Builder_setClickToExpandRequested,set click to expand requested from video options builder sets whether the ad loader should request ads with the click to expand behavior enable. Return type is Video Options. Builder and parameters are boolean. builder for video options,neither,ads
VideoOptions.Builder_setCustomControlsRequested,set custom controls requested from video options builder requests custom video controls for video ad. Return type is Video Options. Builder and parameters are boolean. builder for video options,neither,ads
VideoOptions.Builder_setStartMuted,set start muted from video options builder sets the initial mute state of the vide. Return type is Video Options. Builder and parameters are boolean. builder for video options,neither,ads
MediaContent_getAspectRatio,get aspect ratio from media content returns the aspect ratio of the media conten. Return type is  float and no argument. provides media content information,source,ads
MediaContent_getCurrentTime,get current time from media content gets the current time of the video in second. Return type is  float and no argument. provides media content information,source,ads
MediaContent_getDuration,get duration from media content returns the duration of the video in second. Return type is  float and no argument. provides media content information,source,ads
MediaContent_getMainImage,get main image from media content returns the main image to be displayed if the media content doesn't contain vide. Return type is Drawable and no argument. provides media content information,source,ads
MediaContent_getVideoController,get video controller from media content returns the media content's video controlle. Return type is Video Controller and no argument. provides media content information,neither,ads
MediaContent_hasVideoContent,has video content from media content indicates whether the media content has video conten. Return type is  boolean and no argument. provides media content information,source,ads
MediaContent_setMainImage,set main image from media content sets the optional main image to be displayed if the media content doesn't contain vide. Return type is  void and parameters are drawable. provides media content information,sink,ads
MuteThisAdReason_getDescription,get description from mute this ad reason returns the text representing the mute reaso. Return type is String and no argument. an object used to represent the mute this ad reason,source,ads
OnAdInspectorClosedListener_onAdInspectorClosed,on ad inspector closed from on ad inspector closed listener called when the ad inspector ui has been close. Return type is  void and parameters are ad inspector error. interface definition for a callback to be invoked when the ad inspector ui closes,neither,ads
OnPaidEventListener_onPaidEvent,on paid event from on paid event listener called when an ad is estimated to have earned mone. Return type is  void and parameters are ad value. interface definition for a callback to be invoked when an ad is estimated to have earned money,neither,ads
OnUserEarnedRewardListener_onUserEarnedReward,on user earned reward from on user earned reward listener called when the user earned a rewar. Return type is  void and parameters are reward item. interface definition for a callback to be invoked when the user earned a reward,neither,ads
CastLaunchRequest_getCredentialsData,get credentials data from cast launch request returns the credentials data in the launch reques. Return type is Credentials Data and no argument. the information about an request to launch or join the application,source,tv
CastReceiverContext_getInstance,get instance from cast receiver context returns the shared instanc. Return type is Cast Receiver Context and no argument. the singleton class as the entry point of the cast tv sdk,source,tv
CastReceiverContext_getMediaManager,get media manager from cast receiver context returns the media manage. Return type is Media Manager and no argument. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_getReceiverOptions,get receiver options from cast receiver context returns the receiver option. Return type is Cast Receiver Options and no argument. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_getSender,get sender from cast receiver context returns the sender info with the given sender i. Return type is Sender Info and parameters are string. the singleton class as the entry point of the cast tv sdk,source,tv
CastReceiverContext_getSenders,get senders from cast receiver context returns all sender. Return type is Collection and no argument. the singleton class as the entry point of the cast tv sdk,source,tv
CastReceiverContext_initInstance,init instance from cast receiver context initializes the shared instanc. Return type is  void and parameters are context. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_registerEventCallback,register event callback from cast receiver context registers a cast receiver context event callbac. Return type is void and parameters are cast receiver context event callback. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_removeMessageReceivedListener,remove message received listener from cast receiver context removes a listener for a given namespac. Return type is void and parameters are string. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_sendMessage,send message from cast receiver context sends a message to a specific sende. Return type is void and parameters are string string string. the singleton class as the entry point of the cast tv sdk,sink,tv
CastReceiverContext_setMessageReceivedListener,set message received listener from cast receiver context sets a listener for a given namespac. Return type is void and parameters are string cast receiver context message received listener. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_start,start from cast receiver context tells the cast tv sdk that the receiver app has started and is ready to accept command. Return type is void and no argument. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_stop,stop from cast receiver context tells the cast tv sdk that the receiver app has stopped and won't accept commands any mor. Return type is void and no argument. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext_unregisterEventCallback,unregister event callback from cast receiver context unregisters a cast receiver context event callbac. Return type is void and parameters are cast receiver context event callback. the singleton class as the entry point of the cast tv sdk,neither,tv
CastReceiverContext.EventCallback_onSenderConnected,on sender connected from cast receiver context event callback called when a sender is connecte. Return type is void and parameters are sender info. callback class for observing various events,neither,tv
CastReceiverContext.EventCallback_onSenderDisconnected,on sender disconnected from cast receiver context event callback called when a sender is disconnecte. Return type is void and parameters are sender disconnected event info. callback class for observing various events,neither,tv
CastReceiverContext.EventCallback_onStopApplication,on stop application from cast receiver context event callback called when a sender has requested to stop the applicatio. Return type is void and no argument. callback class for observing various events,neither,tv
CastReceiverOptions_getCustomNamespaces,get custom namespaces from cast receiver options returns the list of custom namespace. Return type is List and no argument. options of cast atv receiver library,source,tv
CastReceiverOptions_getLaunchRequestChecker,get launch request checker from cast receiver options returns the callback to check if a launch request is supporte. Return type is Cast Receiver Options. Launch Request Checker and no argument. options of cast atv receiver library,neither,tv
CastReceiverOptions_getStatusText,get status text from cast receiver options returns the status tex. Return type is String and no argument. options of cast atv receiver library,source,tv
CastReceiverOptions_getVersionCode,get version code from cast receiver options returns the version code of the receiver ap. Return type is int and no argument. options of cast atv receiver library,source,tv
CastReceiverOptions.Builder_build,build from cast receiver options builder builds a cast receiver options object with the provided option. Return type is Cast Receiver Options and no argument. builder for cast receiver options,neither,tv
CastReceiverOptions.Builder_setCustomNamespaces,set custom namespaces from cast receiver options builder sets the list of custom namespace. Return type is Cast Receiver Options. Builder and parameters are list. builder for cast receiver options,neither,tv
CastReceiverOptions.Builder_setLaunchRequestChecker,set launch request checker from cast receiver options builder sets the callback to check if a launch request is supporte. Return type is Cast Receiver Options. Builder and parameters are cast receiver options launch request checker. builder for cast receiver options,neither,tv
CastReceiverOptions.Builder_setStatusText,set status text from cast receiver options builder sets the status tex. Return type is Cast Receiver Options. Builder and parameters are string. builder for cast receiver options,sink,tv
CastReceiverOptions.Builder_setVersionCode,set version code from cast receiver options builder sets the version code of the receiver ap. Return type is Cast Receiver Options. Builder and parameters are int. builder for cast receiver options,sink,tv
CastReceiverUtils_parseCastLaunchRequestFromLaunchIntent,parse cast launch request from launch intent from cast receiver utils parse the cast launch request from a launch inten. Return type is Cast Launch Request and parameters are intent. utility class for miscellaneous helper methods,source,tv
SenderDisconnectedEventInfo_getDisconnectReason,get disconnect reason from sender disconnected event info returns the sender disconnect reaso. Return type is int and no argument. information about a sender disconnected event,source,tv
SenderDisconnectedEventInfo_getSenderInfo,get sender info from sender disconnected event info returns the sender info of the disconnected sende. Return type is Sender Info and no argument. information about a sender disconnected event,source,tv
SenderInfo_getCastLaunchRequest,get cast launch request from sender info returns the cast launch request that the sender used to launch wit. Return type is Cast Launch Request and no argument. the information about a sender,source,tv
SenderInfo_getSenderId,get sender id from sender info returns the id of the sende. Return type is String and no argument. the information about a sender,source,tv
SenderInfo_getUserAgent,get user agent from sender info returns the user agent of the sende. Return type is String and no argument. the information about a sender,source,tv
CastReceiverContext.MessageReceivedListener_onMessageReceived,on message received from cast receiver context message received listener called when a new message is received from the sende. Return type is  void and parameters are string string string. listener for listening messages that come from the sender,neither,tv
CastReceiverOptions.LaunchRequestChecker_checkLaunchRequestSupported,check launch request supported from cast receiver options launch request checker called when a sender requests to launch the app or join the current sessio. Return type is Task and parameters are cast launch request. interface for checking if a launch request is supported,neither,tv
ReceiverOptionsProvider_getOptions,"get options from receiver options provider provides cast receiver options, which indicates the information about the receiver applicatio. Return type is Cast Receiver Options and parameters are context. provider of cast receiver options",source,tv
Asset_createFromBytes,create from bytes from asset creates an asset using a byte arra. Return type is Asset and parameters are byte[]. an asset is a binary blob shared between data items that is replicated across the wearable network on demand,neither,wearable
Asset_createFromFd,create from fd from asset creates an asset using a file descripto. Return type is Asset and parameters are parcel file descriptor. an asset is a binary blob shared between data items that is replicated across the wearable network on demand,neither,wearable
Asset_createFromRef,create from ref from asset create an asset using an existing asset's diges. Return type is Asset and parameters are string. an asset is a binary blob shared between data items that is replicated across the wearable network on demand,neither,wearable
Asset_createFromUri,create from uri from asset creates an asset using a content ur. Return type is Asset and parameters are uri. an asset is a binary blob shared between data items that is replicated across the wearable network on demand,neither,wearable
Asset_getDigest,get digest from asset returns the digest associated with the asset dat. Return type is String and no argument. an asset is a binary blob shared between data items that is replicated across the wearable network on demand,source,wearable
Asset_getFd,get fd from asset returns the file descriptor referencing the asse. Return type is Parcel File Descriptor and no argument. an asset is a binary blob shared between data items that is replicated across the wearable network on demand,source,wearable
Asset_getUri,get uri from asset returns the uri referencing the asset dat. Return type is Uri and no argument. an asset is a binary blob shared between data items that is replicated across the wearable network on demand,source,wearable
CapabilityClient_addListener,add listener from capability client registers a listener to be notified of a specific capability being added to or removed from the wear networ. Return type is Task and parameters are capability client on capability changed listener string. exposes an api to learn about capabilities provided by nodes on the wear network,neither,wearable
CapabilityClient_addListener,add listener from capability client registers a listener to be notified of capabilities being added to or removed from the wear networ. Return type is Task and parameters are capability client on capability changed listener uri int. exposes an api to learn about capabilities provided by nodes on the wear network,neither,wearable
CapabilityClient_addLocalCapability,add local capability from capability client announces that a capability has become available on the local nod. Return type is Task and parameters are string. exposes an api to learn about capabilities provided by nodes on the wear network,sink,wearable
CapabilityClient_getAllCapabilities,"get all capabilities from capability client returns information about all capabilities, including the nodes that declare those capabilitie. Return type is Task> and parameters are int. exposes an api to learn about capabilities provided by nodes on the wear network",source,wearable
CapabilityClient_getCapability,"get capability from capability client returns information about a capability, including the nodes that declare that capabilit. Return type is Task and parameters are string int. exposes an api to learn about capabilities provided by nodes on the wear network",source,wearable
CapabilityClient_removeListener,remove listener from capability client removes a listener which was previously added through add listen. Return type is Task and parameters are capability client on capability changed listener. exposes an api to learn about capabilities provided by nodes on the wear network,neither,wearable
CapabilityClient_removeListener,remove listener from capability client removes a listener which was previously added through add listen. Return type is Task and parameters are capability client on capability changed listener string. exposes an api to learn about capabilities provided by nodes on the wear network,neither,wearable
CapabilityClient_removeLocalCapability,remove local capability from capability client announces that a capability is no longer available on the local nod. Return type is Task and parameters are string. exposes an api to learn about capabilities provided by nodes on the wear network,neither,wearable
ChannelClient_close,"close from channel client closes a channel, passing an application-defined error code to the remote nod. Return type is Task and parameters are channel client channel int. client interface for wearable channel api",neither,wearable
ChannelClient_close,"close from channel client closes a channel, making any future operations on it invali. Return type is Task and parameters are channel client channel. client interface for wearable channel api",neither,wearable
ChannelClient_getInputStream,get input stream from channel client returns an input stream which can read data from the remote nod. Return type is Task and parameters are channel client channel. client interface for wearable channel api,source,wearable
ChannelClient_getOutputStream,get output stream from channel client returns an output stream which can send data to a remote nod. Return type is Task and parameters are channel client channel. client interface for wearable channel api,source,wearable
ChannelClient_openChannel,open channel from channel client opens a channel to exchange data with a remote nod. Return type is Task and parameters are string string. client interface for wearable channel api,sink,wearable
ChannelClient_receiveFile,receive file from channel client reads input from a channel into a fil. Return type is Task and parameters are channel client channel uri boolean. client interface for wearable channel api,source,wearable
ChannelClient_registerChannelCallback,register channel callback from channel client registers a callback to be notified of events for a channe. Return type is Task and parameters are channel client channel channel client channel callback. client interface for wearable channel api,neither,wearable
ChannelClient_registerChannelCallback,register channel callback from channel client registers a callback to be notified of channel event. Return type is Task and parameters are channel client channel callback. client interface for wearable channel api,neither,wearable
ChannelClient_sendFile,send file from channel client reads from a file into the output side of a channe. Return type is Task and parameters are channel client channel uri. client interface for wearable channel api,sink,wearable
ChannelClient_unregisterChannelCallback,unregister channel callback from channel client removes a callback which was previously added through register channel callba. Return type is Task and parameters are channel client channel channel client channel callback. client interface for wearable channel api,neither,wearable
ChannelClient_unregisterChannelCallback,unregister channel callback from channel client removes a callback which was previously added through register channel callba. Return type is Task and parameters are channel client channel callback. client interface for wearable channel api,neither,wearable
ChannelClient.ChannelCallback_onChannelClosed,on channel closed from channel client channel callback called when a channel is close. Return type is void and parameters are channel client channel int int. a callback which will be notified on changes to channels,neither,wearable
ChannelClient.ChannelCallback_onChannelOpened,on channel opened from channel client channel callback called when a new channel is opened by a remote nod. Return type is void and parameters are channel client channel. a callback which will be notified on changes to channels,neither,wearable
ChannelClient.ChannelCallback_onInputClosed,on input closed from channel client channel callback called when the input side of a channel is close. Return type is void and parameters are channel client channel int int. a callback which will be notified on changes to channels,neither,wearable
ChannelClient.ChannelCallback_onOutputClosed,on output closed from channel client channel callback called when the output side of a channel is close. Return type is void and parameters are channel client channel int int. a callback which will be notified on changes to channels,neither,wearable
DataClient_addListener,add listener from data client registers a listener to receive data item changed and deleted event. Return type is Task and parameters are data client on data changed listener. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets},neither,wearable
DataClient_deleteDataItems,delete data items from data client removes all specified data items from the android wear networ. Return type is Task and parameters are uri int. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets},neither,wearable
DataClient_getDataItem,get data item from data client retrieves a single data item from the android wear networ. Return type is Task and parameters are uri. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets},source,wearable
DataClient_getDataItems,"get data items from data client retrieves all data items matching the provided uri and filter type, from the android wear networ. Return type is Task and parameters are uri int. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets}",source,wearable
DataClient_getDataItems,get data items from data client retrieves all data items from the android wear networ. Return type is Task and no argument. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets},source,wearable
DataClient_getDataItems,"get data items from data client retrieves all data items matching the provided u r i, from the android wear networ. Return type is Task and parameters are uri. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets}",source,wearable
DataClient_getFdForAsset,get fd for asset from data client retrieves a parcel file descriptor pointing at the bytes of an asse. Return type is Task and parameters are data item asset. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets},source,wearable
DataClient_putDataItem,put data item from data client adds a data item to the android wear networ. Return type is Task and parameters are put data request. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets},sink,wearable
DataClient_removeListener,remove listener from data client removes a listener which was previously added through add listen. Return type is Task and parameters are data client on data changed listener. exposes an api for components to read or write {@linkplain data item data items} and {@linkplain asset assets},neither,wearable
DataClient.GetFdForAssetResponse_getFdForAsset,get fd for asset from data client get fd for asset response returns a file descriptor for the requested asse. Return type is Parcel File Descriptor and no argument. contains a file descriptor for the requested asset,source,wearable
DataClient.GetFdForAssetResponse_getInputStream,get input stream from data client get fd for asset response returns an input stream wrapping the file descripto. Return type is Input Stream and no argument. contains a file descriptor for the requested asset,source,wearable
DataMap_arrayListFromBundleArrayList,array list from bundle array list from data map returns an array list of data maps from an array list of bundle. Return type is Array List and parameters are array list. a map of data supported by put data map request and data map items,source,wearable
DataMap_clear,clear from data map removes all elements from the mapping of this data ma. Return type is void and no argument. a map of data supported by put data map request and data map items,neither,wearable
DataMap_containsKey,contains key from data map returns true if the given key is contained in the mapping of this data ma. Return type is boolean and parameters are string. a map of data supported by put data map request and data map items,source,wearable
DataMap_equals,equals from data map returns true if the given object is a data map equivalent to this on. Return type is boolean and parameters are object. a map of data supported by put data map request and data map items,neither,wearable
DataMap_fromBundle,from bundle from data map returns a data map from a bundl. Return type is Data Map and parameters are bundle. a map of data supported by put data map request and data map items,neither,wearable
DataMap_fromByteArray,from byte array from data map returns a data map from a byte[. Return type is Data Map and parameters are byte[]. a map of data supported by put data map request and data map items,neither,wearable
DataMap_get,get from data map returns the entry with the given key as an objec. Return type is T and parameters are string. a map of data supported by put data map request and data map items,source,wearable
DataMap_getAsset,"get asset from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is Asset and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getBoolean,"get boolean from data map returns the value associated with the given key, or default value if no mapping of the desired type exists for the given ke. Return type is boolean and parameters are string boolean. a map of data supported by put data map request and data map items",source,wearable
DataMap_getBoolean,"get boolean from data map returns the value associated with the given key, or false if no mapping of the desired type exists for the given ke. Return type is boolean and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getByte,"get byte from data map returns the value associated with the given key, o. Return type is byte and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getByte,"get byte from data map returns the value associated with the given key, or default value if no mapping of the desired type exists for the given ke. Return type is byte and parameters are string byte. a map of data supported by put data map request and data map items",source,wearable
DataMap_getByteArray,"get byte array from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is byte[] and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getDataMap,"get data map from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is Data Map and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getDataMapArrayList,"get data map array list from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is Array List and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getDouble,"get double from data map returns the value associated with the given key, or default value if no mapping of the desired type exists for the given ke. Return type is double and parameters are string double. a map of data supported by put data map request and data map items",source,wearable
DataMap_getDouble,"get double from data map returns the value associated with the given key, or 00 if no mapping of the desired type exists for the given ke. Return type is double and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getFloat,"get float from data map returns the value associated with the given key, or default value if no mapping of the desired type exists for the given ke. Return type is float and parameters are string float. a map of data supported by put data map request and data map items",source,wearable
DataMap_getFloat,"get float from data map returns the value associated with the given key, or 00f if no mapping of the desired type exists for the given ke. Return type is float and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getFloatArray,"get float array from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is float[] and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getInt,"get int from data map returns the value associated with the given key, or default value if no mapping of the desired type exists for the given ke. Return type is int and parameters are string int. a map of data supported by put data map request and data map items",source,wearable
DataMap_getInt,"get int from data map returns the value associated with the given key, or 0 if no mapping of the desired type exists for the given ke. Return type is int and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getIntegerArrayList,"get integer array list from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is Array List and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getLong,"get long from data map returns the value associated with the given key, or default value if no mapping of the desired type exists for the given ke. Return type is long and parameters are string long. a map of data supported by put data map request and data map items",source,wearable
DataMap_getLong,"get long from data map returns the value associated with the given key, or 0 l if no mapping of the desired type exists for the given ke. Return type is long and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getLongArray,"get long array from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is long[] and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getString,"get string from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is String and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getString,"get string from data map returns the value associated with the given key, or default value if no mapping of the desired type exists for the given ke. Return type is String and parameters are string string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getStringArray,"get string array from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is String[] and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_getStringArrayList,"get string array list from data map returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the ke. Return type is Array List and parameters are string. a map of data supported by put data map request and data map items",source,wearable
DataMap_isEmpty,"is empty from data map returns true if the mapping of this data map is empty, false otherwis. Return type is boolean and no argument. a map of data supported by put data map request and data map items",neither,wearable
DataMap_keySet,key set from data map returns a set containing the strings used as keys in this data ma. Return type is Set and no argument. a map of data supported by put data map request and data map items,neither,wearable
DataMap_putAll,put all from data map inserts all mappings from the given data map into this data ma. Return type is void and parameters are data map. a map of data supported by put data map request and data map items,sink,wearable
DataMap_putAsset,"put asset from data map inserts an asset into the mapping of this data map, replacing any existing asset for the given ke. Return type is void and parameters are string asset. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putBoolean,"put boolean from data map inserts a boolean value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string boolean. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putByte,"put byte from data map inserts a byte value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string byte. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putByteArray,"put byte array from data map inserts a byte array value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string byte[]. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putDataMap,"put data map from data map inserts a data map into the mapping of this data map, replacing any existing data map for the given ke. Return type is void and parameters are string data map. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putDataMapArrayList,"put data map array list from data map inserts an array list value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string array list. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putDouble,"put double from data map inserts a double value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string double. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putFloat,"put float from data map inserts a float value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string float. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putFloatArray,"put float array from data map inserts a float array value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string float[]. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putInt,"put int from data map inserts an int value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string int. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putIntegerArrayList,"put integer array list from data map inserts an array list value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string array list. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putLong,"put long from data map inserts a long value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string long. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putLongArray,"put long array from data map inserts a long array value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string long[]. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putString,"put string from data map inserts a string value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string string. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putStringArray,"put string array from data map inserts a string array value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string string[]. a map of data supported by put data map request and data map items",sink,wearable
DataMap_putStringArrayList,"put string array list from data map inserts an array list value into the mapping of this data map, replacing any existing value for the given ke. Return type is void and parameters are string array list. a map of data supported by put data map request and data map items",sink,wearable
DataMap_remove,remove from data map removes any entry with the given key from the mapping of this data ma. Return type is Object and parameters are string. a map of data supported by put data map request and data map items,neither,wearable
DataMap_size,size from data map returns the number of key-value pairs in this ma. Return type is int and no argument. a map of data supported by put data map request and data map items,neither,wearable
DataMap_toBundle,to bundle from data map returns a bundle containing all the elements on this data ma. Return type is Bundle and no argument. a map of data supported by put data map request and data map items,neither,wearable
DataMap_toByteArray,to byte array from data map returns a serialized byte[] representing this data ma. Return type is byte[] and no argument. a map of data supported by put data map request and data map items,neither,wearable
DataMapItem_fromDataItem,from data item from data map item provides a data map item wrapping a data ite. Return type is Data Map Item and parameters are data item. creates a new data item like object containing structured and serializable data,neither,wearable
DataMapItem_getDataMap,get data map from data map item returns the data ma. Return type is Data Map and no argument. creates a new data item like object containing structured and serializable data,source,wearable
DataMapItem_getUri,get uri from data map item returns the underlying data item's ur. Return type is Uri and no argument. creates a new data item like object containing structured and serializable data,source,wearable
MessageClient_addListener,add listener from message client registers a listener to be notified of received message. Return type is Task and parameters are message client on message received listener uri int. exposes an api for components to send messages to other nodes,neither,wearable
MessageClient_removeListener,remove listener from message client removes a listener which was previously added through add listen. Return type is Task and parameters are message client on message received listener. exposes an api for components to send messages to other nodes,neither,wearable
MessageClient_sendMessage,send message from message client sends byte[] data to the specified nod. Return type is Task and parameters are string string byte[]. exposes an api for components to send messages to other nodes,sink,wearable
NodeClient_getCompanionPackageForNode,get companion package for node from node client gets the package name for the companion application associated with this nod. Return type is Task and parameters are string. exposes an api for learning about local or connected nodes,source,wearable
NodeClient_getConnectedNodes,"get connected nodes from node client gets a list of nodes to which this device is currently connected, either directly or indirectly via a directly connected nod. Return type is Task> and no argument. exposes an api for learning about local or connected nodes",source,wearable
NodeClient_getLocalNode,get local node from node client gets the node that refers to this devic. Return type is Task and no argument. exposes an api for learning about local or connected nodes,source,wearable
PutDataMapRequest_asPutDataRequest,as put data request from put data map request creates a put data request containing the data and assets in this put data map reques. Return type is Put Data Request and no argument. put data map request is a data map aware version of put data request,neither,wearable
PutDataMapRequest_create,"create from put data map request creates a put data map request with the provided, complete, pat. Return type is Put Data Map Request and parameters are string. put data map request is a data map aware version of put data request",neither,wearable
PutDataMapRequest_createFromDataMapItem,create from data map item from put data map request creates a put data map request from a data map item using the provided sourc. Return type is Put Data Map Request and parameters are data map item. put data map request is a data map aware version of put data request,neither,wearable
PutDataMapRequest_createWithAutoAppendedId,create with auto appended id from put data map request creates a put data map request with a randomly generated id prefixed with the provided pat. Return type is Put Data Map Request and parameters are string. put data map request is a data map aware version of put data request,neither,wearable
PutDataMapRequest_getUri,get uri from put data map request returns a uri for the pending data ite. Return type is Uri and no argument. put data map request is a data map aware version of put data request,source,wearable
PutDataMapRequest_isUrgent,is urgent from put data map request whether the data item for this request is urgen. Return type is boolean and no argument. put data map request is a data map aware version of put data request,neither,wearable
PutDataMapRequest_setUrgent,set urgent from put data map request flags this data item for urgent transpor. Return type is Put Data Map Request and no argument. put data map request is a data map aware version of put data request,sink,wearable
PutDataRequest_create,"create from put data request creates a data item with the provided, complete, pat. Return type is Put Data Request and parameters are string. put data request is used to create new data items in the android wear network",neither,wearable
PutDataRequest_createFromDataItem,create from data item from put data request creates a put data request from an existing data item using the provided sourc. Return type is Put Data Request and parameters are data item. put data request is used to create new data items in the android wear network,neither,wearable
PutDataRequest_createWithAutoAppendedId,create with auto appended id from put data request creates a put data request with a randomly generated id prefixed with the provided pat. Return type is Put Data Request and parameters are string. put data request is used to create new data items in the android wear network,neither,wearable
PutDataRequest_getAsset,get asset from put data request returns an asset previously added with put ass. Return type is Asset and parameters are string. put data request is used to create new data items in the android wear network,source,wearable
PutDataRequest_getData,get data from put data request an array of data stored at the specfied ur. Return type is byte[] and no argument. put data request is used to create new data items in the android wear network,source,wearable
PutDataRequest_getUri,get uri from put data request returns a uri for the pending data ite. Return type is Uri and no argument. put data request is used to create new data items in the android wear network,source,wearable
PutDataRequest_isUrgent,is urgent from put data request whether the data item for this request is urgen. Return type is boolean and no argument. put data request is used to create new data items in the android wear network,source,wearable
PutDataRequest_putAsset,put asset from put data request adds an asset to the data ite. Return type is Put Data Request and parameters are string asset. put data request is used to create new data items in the android wear network,sink,wearable
PutDataRequest_removeAsset,remove asset from put data request removes a previously added asse. Return type is Put Data Request and parameters are string. put data request is used to create new data items in the android wear network,neither,wearable
PutDataRequest_setData,set data from put data request sets the data in a data ite. Return type is Put Data Request and parameters are byte[]. put data request is used to create new data items in the android wear network,sink,wearable
PutDataRequest_setUrgent,set urgent from put data request flags this data item for urgent transpor. Return type is Put Data Request and no argument. put data request is used to create new data items in the android wear network,sink,wearable
Wearable_getCapabilityClient,get capability client from wearable create a new instance of capability client for use in a non-activity contex. Return type is Capability Client and parameters are context. an api for the android wear platform,neither,wearable
Wearable_getCapabilityClient,get capability client from wearable create a new instance of capability client for use in an activit. Return type is Capability Client and parameters are activity wearable wearable options. an api for the android wear platform,neither,wearable
Wearable_getChannelClient,get channel client from wearable create a new instance of channel client for use in a non-activity contex. Return type is Channel Client and parameters are context wearable wearable options. an api for the android wear platform,neither,wearable
Wearable_getChannelClient,get channel client from wearable create a new instance of channel client for use in an activit. Return type is Channel Client and parameters are activity wearable wearable options. an api for the android wear platform,neither,wearable
Wearable_getDataClient,get data client from wearable create a new instance of data client for use in an activit. Return type is Data Client and parameters are activity wearable wearable options. an api for the android wear platform,neither,wearable
Wearable_getDataClient,get data client from wearable create a new instance of data client for use in a non-activity contex. Return type is Data Client and parameters are context wearable wearable options. an api for the android wear platform,neither,wearable
Wearable_getMessageClient,get message client from wearable create a new instance of message client for use in a non-activity contex. Return type is Message Client and parameters are context wearable wearable options. an api for the android wear platform,neither,wearable
Wearable_getMessageClient,get message client from wearable create a new instance of message client for use in an activit. Return type is Message Client and parameters are activity. an api for the android wear platform,neither,wearable
Wearable_getNodeClient,get node client from wearable create a new instance of node client for use in a non-activity contex. Return type is Node Client and parameters are context. an api for the android wear platform,neither,wearable
Wearable_getNodeClient,get node client from wearable create a new instance of node client for use in an activit. Return type is Node Client and parameters are activity. an api for the android wear platform,neither,wearable
Wearable.WearableOptions.Builder_build,build from wearable wearable options builder builds a wearable wearable option. Return type is Wearable. Wearable Options and no argument. builder class for wearable wearable option,neither,wearable
Wearable.WearableOptions.Builder_setLooper,set looper from wearable wearable options builder sets the looper used for listener callback. Return type is Wearable. Wearable Options. Builder and parameters are looper. builder class for wearable wearable option,neither,wearable
WearableListenerService_getLooper,"get looper from wearable listener service this method is used to retrieve the looper all callbacks will run o. Return type is Looper and no argument. receives events from other nodes, such as data changes, messages or connectivity events",neither,wearable
WearableListenerService_onChannelClosed,"on channel closed from wearable listener service called when a channel is close. Return type is void and parameters are channel int int. receives events from other nodes, such as data changes, messages or connectivity events",neither,wearable
WearableListenerService_onChannelOpened,"on channel opened from wearable listener service called when a new channel is opened by a remote nod. Return type is void and parameters are channel. receives events from other nodes, such as data changes, messages or connectivity events",neither,wearable
WearableListenerService_onDataChanged,"on data changed from wearable listener service receives data changed event. Return type is void and parameters are data event buffer. receives events from other nodes, such as data changes, messages or connectivity events",neither,wearable
WearableListenerService_onInputClosed,"on input closed from wearable listener service called when the input side of a channel is close. Return type is void and parameters are channel int int. receives events from other nodes, such as data changes, messages or connectivity events",neither,wearable
WearableListenerService_onMessageReceived,"on message received from wearable listener service receives message event. Return type is void and parameters are message event. receives events from other nodes, such as data changes, messages or connectivity events",neither,wearable
WearableListenerService_onOutputClosed,"on output closed from wearable listener service called when the output side of a channel is close. Return type is void and parameters are channel int int. receives events from other nodes, such as data changes, messages or connectivity events",neither,wearable
WearableStatusCodes_getStatusCodeString,get status code string from wearable status codes returns an untranslated debu. Return type is String and parameters are int. error codes for wearable api failures,source,wearable
CapabilityApi_addCapabilityListener,add capability listener from capability api registers a listener to be notified of a specific capability being added to or removed from the wear networ. Return type is Pending Result and parameters are google api client capability api capability listener string. this interface is deprecated  use capability client,neither,wearable
CapabilityApi_addListener,add listener from capability api registers a listener to be notified of capabilities being added to or removed from the wear networ. Return type is Pending Result and parameters are google api client capability api capability listener uri int. this interface is deprecated  use capability client,neither,wearable
CapabilityApi_addLocalCapability,add local capability from capability api announces that a capability has become available on the local nod. Return type is Pending Result and parameters are google api client string. this interface is deprecated  use capability client,neither,wearable
CapabilityApi_getAllCapabilities,"get all capabilities from capability api returns information about all capabilities, including the nodes that declare those capabilitie. Return type is Pending Result and parameters are google api client int. this interface is deprecated  use capability client",neither,wearable
CapabilityApi_getCapability,"get capability from capability api returns information about a capability, including the nodes that declare that capabilit. Return type is Pending Result and parameters are google api client string int. this interface is deprecated  use capability client",neither,wearable
CapabilityApi_removeCapabilityListener,remove capability listener from capability api removes a listener which was previously added through add capability listen. Return type is Pending Result and parameters are google api client capability api capability listener string. this interface is deprecated  use capability client,neither,wearable
CapabilityApi_removeListener,remove listener from capability api removes a listener which was previously added through add listen. Return type is Pending Result and parameters are google api client capability api capability listener. this interface is deprecated  use capability client,neither,wearable
CapabilityApi_removeLocalCapability,remove local capability from capability api announces that a capability is no longer available on the local nod. Return type is Pending Result and parameters are google api client string. this interface is deprecated  use capability client,neither,wearable
CapabilityInfo_getName,get name from capability info returns the name of the capabilit. Return type is String and no argument. information about a capability on the network and where it is available,source,wearable
CapabilityInfo_getNodes,get nodes from capability info returns the set of nodes for the capabilit. Return type is Set and no argument. information about a capability on the network and where it is available,source,wearable
Channel_addListener,add listener from channel registers a listener to be notified of events for this channe. Return type is Pending Result and parameters are google api client channel api channel listener. this interface is deprecated  use channel client channel,neither,wearable
Channel_close,"close from channel closes this channel, passing an application-defined error code to the remote nod. Return type is Pending Result and parameters are google api client int. this interface is deprecated  use channel client channel",neither,wearable
Channel_close,"close from channel closes this channel, making any future operations on it invali. Return type is Pending Result and parameters are google api client. this interface is deprecated  use channel client channel",neither,wearable
Channel_getInputStream,get input stream from channel opens the input side of the channel to receive data from the remote nod. Return type is Pending Result and parameters are google api client. this interface is deprecated  use channel client channel,source,wearable
Channel_getNodeId,get node id from channel returns the node id of the node on the other side of the channe. Return type is String and no argument. this interface is deprecated  use channel client channel,source,wearable
Channel_getOutputStream,get output stream from channel opens the output side of the channel to send data to the remote nod. Return type is Pending Result and parameters are google api client. this interface is deprecated  use channel client channel,source,wearable
Channel_getPath,get path from channel returns the path that was used to open the channe. Return type is String and no argument. this interface is deprecated  use channel client channel,source,wearable
Channel_receiveFile,receive file from channel reads input from this channel into a fil. Return type is Pending Result and parameters are google api client uri boolean. this interface is deprecated  use channel client channel,source,wearable
Channel_removeListener,remove listener from channel removes a listener which was previously added through add listen. Return type is Pending Result and parameters are google api client channel api channel listener. this interface is deprecated  use channel client channel,neither,wearable
Channel_sendFile,send file from channel reads from a file into the output side of the channe. Return type is Pending Result and parameters are google api client uri. this interface is deprecated  use channel client channel,sink,wearable
Channel.GetInputStreamResult_getInputStream,get input stream from channel get input stream result returns an input stream which can read data from the remote nod. Return type is Input Stream and no argument. this interface is deprecated  see channel client get input stream,source,wearable
Channel.GetOutputStreamResult_getOutputStream,get output stream from channel get output stream result returns an output stream which can send data to a remote nod. Return type is Output Stream and no argument. this interface is deprecated  see channel client get output stream,source,wearable
ChannelApi_addListener,add listener from channel api registers a listener to be notified of channel event. Return type is Pending Result and parameters are google api client channel api channel listener. this interface is deprecated  use channel client,neither,wearable
ChannelApi_openChannel,open channel from channel api opens a channel to exchange data with a remote nod. Return type is Pending Result and parameters are google api client string string. this interface is deprecated  use channel client,sink,wearable
ChannelApi_removeListener,remove listener from channel api removes a listener which was previously added through add listen. Return type is Pending Result and parameters are google api client channel api channel listener. this interface is deprecated  use channel client,neither,wearable
ChannelApi.ChannelListener_onChannelClosed,on channel closed from channel api channel listener called when a channel is close. Return type is  void and parameters are channel int int. this interface is deprecated  use channel client channel callback,neither,wearable
ChannelApi.ChannelListener_onChannelOpened,on channel opened from channel api channel listener called when a new channel is opened by a remote nod. Return type is  void and parameters are channel. this interface is deprecated  use channel client channel callback,neither,wearable
ChannelApi.ChannelListener_onInputClosed,on input closed from channel api channel listener called when the input side of a channel is close. Return type is  void and parameters are channel int int. this interface is deprecated  use channel client channel callback,neither,wearable
ChannelApi.ChannelListener_onOutputClosed,on output closed from channel api channel listener called when the output side of a channel is close. Return type is  void and parameters are channel int int. this interface is deprecated  use channel client channel callback,neither,wearable
ChannelApi.OpenChannelResult_getChannel,"get channel from channel api open channel result returns the newly created channel, or null, if the connection couldn't be opene. Return type is Channel and no argument. this interface is deprecated  see channel client open channel",sink,wearable
ChannelClient.Channel_getNodeId,get node id from channel client channel returns the node id of the node on the other side of the channe. Return type is String and no argument. a channel created through channel client open channel,source,wearable
ChannelClient.Channel_getPath,get path from channel client channel returns the path that was used to open the channe. Return type is String and no argument. a channel created through channel client open channel,source,wearable
DataApi_addListener,add listener from data api registers a listener to receive data item changed and deleted event. Return type is Pending Result and parameters are google api client data api data listener. this interface is deprecated  use data client,neither,wearable
DataApi_deleteDataItems,delete data items from data api removes all specified data items from the android wear networ. Return type is Pending Result and parameters are google api client uri int. this interface is deprecated  use data client,neither,wearable
DataApi_getDataItem,get data item from data api retrieves a single data item from the android wear networ. Return type is Pending Result and parameters are google api client uri. this interface is deprecated  use data client,source,wearable
DataApi_getDataItems,"get data items from data api retrieves all data items matching the provided uri and filter type, from the android wear networ. Return type is Pending Result and parameters are google api client uri int. this interface is deprecated  use data client",source,wearable
DataApi_getDataItems,get data items from data api retrieves all data items from the android wear networ. Return type is Pending Result and parameters are google api client. this interface is deprecated  use data client,source,wearable
DataApi_getDataItems,"get data items from data api retrieves all data items matching the provided u r i, from the android wear networ. Return type is Pending Result and parameters are google api client uri. this interface is deprecated  use data client",source,wearable
DataApi_getFdForAsset,get fd for asset from data api retrieves a parcel file descriptor pointing at the bytes of an asse. Return type is Pending Result and parameters are google api client asset. this interface is deprecated  use data client,source,wearable
DataApi_putDataItem,put data item from data api adds a data item to the android wear networ. Return type is Pending Result and parameters are google api client put data request. this interface is deprecated  use data client,sink,wearable
DataApi_removeListener,remove listener from data api removes a data listener which was previously added through add listen. Return type is Pending Result and parameters are google api client data api data listener. this interface is deprecated  use data client,neither,wearable
DataApi.DataItemResult_getDataItem,"get data item from data api data item result returns a data item, or null if the item does not exi. Return type is Data Item and no argument. this interface is deprecated  see data client get data item",source,wearable
DataApi.DataListener_onDataChanged,on data changed from data api data listener notification that a set of data items have been changed or delete. Return type is  void and parameters are data event buffer. this interface is deprecated  use data client on data changed listener,neither,wearable
DataApi.DeleteDataItemsResult_getNumDeleted,get num deleted from data api delete data items result returns the number of items deleted by data apidelete data ite. Return type is  int and no argument. this interface is deprecated  see data client delete data items,source,wearable
DataApi.GetFdForAssetResult_getFd,get fd from data api get fd for asset result returns a file descriptor for the requested asse. Return type is Parcel File Descriptor and no argument. this interface is deprecated  use data client get fd for asset response,source,wearable
DataApi.GetFdForAssetResult_getInputStream,get input stream from data api get fd for asset result returns an input stream wrapping the file descripto. Return type is Input Stream and no argument. this interface is deprecated  use data client get fd for asset response,source,wearable
DataClient.OnDataChangedListener_onDataChanged,on data changed from data client on data changed listener notification that a set of data items have been changed or delete. Return type is  void and parameters are data event buffer. used with data client add listener to receive data events,neither,wearable
DataEvent_getDataItem,get data item from data event returns the data item modified in this even. Return type is Data Item and no argument. data interface for data events,source,wearable
DataEvent_getType,get type from data event returns the type of event this i. Return type is  int and no argument. data interface for data events,source,wearable
DataItem_getAssets,get assets from data item a map of assets associated with this data ite. Return type is Map and no argument. the base object of data stored in the android wear network,source,wearable
DataItem_getData,get data from data item an array of data stored at the specified ur. Return type is  byte[] and no argument. the base object of data stored in the android wear network,source,wearable
DataItem_getUri,get uri from data item returns the data item's ur. Return type is Uri and no argument. the base object of data stored in the android wear network,source,wearable
DataItem_setData,set data from data item sets the data in a data ite. Return type is Data Item and parameters are byte[]. the base object of data stored in the android wear network,sink,wearable
MessageApi_addListener,add listener from message api registers a listener to be notified of received message. Return type is Pending Result and parameters are google api client message api message listener uri int. this interface is deprecated  use message client,neither,wearable
MessageApi_removeListener,remove listener from message api removes a message listener which was previously added through add listen. Return type is Pending Result and parameters are google api client message api message listener. this interface is deprecated  use message client,neither,wearable
MessageApi_sendMessage,send message from message api sends byte[] data to the specified nod. Return type is Pending Result and parameters are google api client string string byte[]. this interface is deprecated  use message client,sink,wearable
MessageApi.MessageListener_onMessageReceived,on message received from message api message listener notification that a message has been receive. Return type is  void and parameters are message event. this interface is deprecated  use message client on message received listener,neither,wearable
MessageApi.SendMessageResult_getRequestId,get request id from message api send message result returns an id used to identify the sent messag. Return type is  int and no argument. this interface is deprecated  see message client send message,source,wearable
MessageClient.OnMessageReceivedListener_onMessageReceived,on message received from message client on message received listener notification that a message has been receive. Return type is  void and parameters are message event. used with message client add listener to receive message events,neither,wearable
MessageEvent_getData,get data from message event returns the data passed by the messag. Return type is  byte[] and no argument. information about a message received by a {@linkplain message api message listener listener},source,wearable
MessageEvent_getPath,get path from message event returns the path the message is being delivered t. Return type is String and no argument. information about a message received by a {@linkplain message api message listener listener},source,wearable
MessageEvent_getRequestId,"get request id from message event returns the request id of the message, generated by the sende. Return type is  int and no argument. information about a message received by a {@linkplain message api message listener listener}",source,wearable
MessageEvent_getSourceNodeId,get source node id from message event returns the node id of the sende. Return type is String and no argument. information about a message received by a {@linkplain message api message listener listener},source,wearable
Node_getDisplayName,get display name from node returns a human readable description of the nod. Return type is String and no argument. information about a particular node in the android wear network,source,wearable
Node_getId,get id from node returns an opaque string that represents a node in the android wear networ. Return type is String and no argument. information about a particular node in the android wear network,source,wearable
Node_isNearby,is nearby from node indicates that this node can be considered geographically nearby the local nod. Return type is  boolean and no argument. information about a particular node in the android wear network,source,wearable
NodeApi_getConnectedNodes,"get connected nodes from node api gets a list of nodes to which this device is currently connected, either directly or indirectly via a directly connected nod. Return type is Pending Result and parameters are google api client. this interface is deprecated  use node client",source,wearable
NodeApi_getLocalNode,get local node from node api gets the node that refers to this devic. Return type is Pending Result and parameters are google api client. this interface is deprecated  use node client,source,wearable
NodeApi.GetConnectedNodesResult_getNodes,"get nodes from node api get connected nodes result returns a list of connected nodes, either directly or indirectly via a directly connected nod. Return type is List and no argument. this interface is deprecated  see node client get connected nodes",source,wearable
NodeApi.GetLocalNodeResult_getNode,get node from node api get local node result returns a node object which represents this devic. Return type is Node and no argument. this interface is deprecated  see node client get local node,source,wearable
